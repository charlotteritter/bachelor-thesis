GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


      Bismark Singh
      March 17, 2021
       
      Code for plain Lagrangian decomposition (removed Progressive Hedging)
      Based on the paper at http://www.optimization-online.org/DB_HTML/2019/05/7222.html
       
       
      Excel file used for LB heuristic needs to be manually sorted
       
  12   
  14  OPTIONS PROFILE =3, RESLIM   = 2100, LIMROW   = 5, LP = CPLEX, MIP = cplex, RMIP=cplex, NLP = CONOPT, MINLP = DICOPT, MIQCP = CPLEX, SOLPRINT = OFF, decimals = 8, optcr=0.001, optca=0.001, threads =8, integer4=0;
  15   
  16  ********************************************************************************
  17  *                                Include input files
  18  ********************************************************************************
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/inputME.gms
  20  ** sets later to be defined in input file
  21   
  22  ** to be changed
  23   
  24  SETS T times/t1*t24/;
  25   
  26  * Number of scenarios
  27  *SETS SCEN scenarios /scen1*%MAXSCEN%/;
  28  SETS SCEN scenarios /scen1*scen100/;
  29   
  30  TABLE Solar(scen,t)
  32  *$INCLUDE %SOLAR%.csv
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/solar_scenarios_100_8.csv
  34  ,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24
  35  scen1,0,0,0,0,0,0,0.551094952,44.99184576,220.642493,793.1564901,932.2090398,865.5766109,1281.057436,934.7497656,624.7068853,1072.505534,923.2021331,515.0855579,196.8818105,142.3933953,0,0,0,0
  36  scen2,0,0,0,0,0,0,0.298296163,21.94972714,77.90406009,764.0695528,1113.32893,1176.761479,857.3768008,893.7968855,1099.745501,1020.069065,826.8274733,423.9144008,194.2331563,124.4039143,0,0,0,0
  37  scen3,0,0,0,0,0,0,0,21.81348521,50.12073977,701.4588937,1005.243385,1264.819416,879.3471792,1088.320464,1092.786441,1028.293435,764.2006474,426.0063273,187.4179733,122.5299985,0,0,0,0
  38  scen4,0,0,0,0,0,0,0,27.69791488,63.2504411,682.6492425,918.921761,894.7898337,1126.080614,1270.430434,1082.480686,959.561524,771.1482037,491.2272673,176.6340059,101.8286356,0,0,0,0
  39  scen5,0,0,0,0,0,0,0.640054172,24.21562388,87.50445992,692.5733793,1043.508126,987.1799359,817.2832814,1118.350863,1033.352337,804.8352478,733.938515,391.5503264,187.9761133,144.4154481,0,0,0,0
  40  scen6,0,0,0,0,0,0,0.075380546,26.51020815,88.64453457,530.2393543,1055.721766,1057.179326,916.3286051,1123.800192,1078.064459,844.9221131,780.3020323,447.1389612,181.7591314,148.9762369,0,0,0,0
  41  scen7,0,0,0,0,0,0,0.662027538,27.89739838,104.4665745,481.6508597,1097.218167,1050.130814,1153.878889,861.1720375,969.0284384,938.3666896,698.864886,457.9901577,197.310528,107.1712501,0,0,0,0
  42  scen8,0,0,0,0,0,0,0.5192699,34.21711347,86.35156792,573.8098431,917.4228042,991.3448403,1315.427245,1315.435402,1105.103168,1066.549053,688.5700532,458.1833919,196.6082787,119.3372596,0,0,0,0
  43  scen9,0,0,0,0,0,0,0,28.27064273,145.4063612,655.8713225,863.7223848,1118.186467,985.5386759,1329.33502,1161.217991,917.7692957,605.3070463,450.2423999,172.0319923,122.0755521,0,0,0,0
  44  scen10,0,0,0,0,0,0,0.713695418,11.39807926,129.7824654,569.5581818,1036.253728,941.4423998,1293.179864,1185.567706,955.1442517,993.2732035,806.3320298,495.0394846,189.169208,110.2047793,0,0,0,0
  45  scen11,0,0,0,0,0,0,0.137209043,12.61625726,138.3374465,641.1979017,933.1512956,1005.438781,1238.387811,1225.589638,927.7086631,1044.490823,805.8026886,487.496497,188.184657,115.0777575,0,0,0,0
  46  scen12,0,0,0,0,0,0,0,35.8674491,173.9237176,661.0409947,1092.018591,1024.155637,1271.836932,1047.832171,1122.793034,1031.331398,805.2060415,454.729326,196.9897471,144.3393614,0,0,0,0
  47  scen13,0,0,0,0,0,0,0.195072735,15.8478309,140.3436877,670.6500491,916.3523307,1139.311676,1004.296232,1300.217234,1145.559138,1008.548299,790.7051858,405.4529887,196.1587531,122.3156927,0,0,0,0
  48  scen14,0,0,0,0,0,0,0.31757533,25.34650413,20.30352523,774.8982025,910.0898135,1096.196823,1220.877908,1062.536429,977.3771037,1085.173533,734.3278116,439.8703811,168.3271002,143.3800483,0,0,0,0
  49  scen15,0,0,0,0,0,0,0.041399209,31.26337049,64.08616556,696.0955753,1021.326127,946.5575196,895.3196292,1299.420946,1040.765238,1145.474545,597.5433481,439.0357244,195.5731165,119.013259,0,0,0,0
  50  scen16,0,0,0,0,0,0,0.448853247,28.5312849,133.3320274,484.294586,667.206318,999.6109758,1148.850891,1380.073978,981.787835,968.5028699,632.5019823,459.5749605,172.2378632,114.8426854,0,0,0,0
  51  scen17,0,0,0,0,0,0,0.183030447,9.785183278,220.8199113,690.8658406,770.3370222,1110.809094,1071.204822,935.079729,885.2522323,1055.239934,700.3856211,457.6935606,181.8005313,126.4974169,0,0,0,0
  52  scen18,0,0,0,0,0,0,0,8.570266359,121.2639177,609.7272182,1106.662703,696.8720099,1249.807966,1210.23584,1474.597193,909.9615853,815.9866536,459.2795983,168.8178737,114.7767171,0,0,0,0
  53  scen19,0,0,0,0,0,0,0.039106224,0,96.35973357,680.7375611,1187.977508,1198.589561,1024.661476,1338.762997,1163.098429,800.9247036,790.7924512,475.133586,210.787513,132.3624879,0,0,0,0
  54  scen20,0,0,0,0,0,0,0,28.13106937,91.2555423,491.2876437,989.6744192,1137.413845,1054.877937,1292.694277,1017.880195,1077.715012,769.891461,482.5233517,177.3357967,124.4584919,0,0,0,0
  55  scen21,0,0,0,0,0,0,0,23.69220383,34.40501778,709.3916656,870.8466968,1194.384169,1185.6341,1056.940887,1072.791947,1097.680178,747.4996626,485.4886378,192.7034239,121.1103757,0,0,0,0
  56  scen22,0,0,0,0,0,0,0.285143203,18.07177934,70.20925652,819.2212241,846.7779195,786.2785862,1322.837436,1197.652347,1159.014362,1107.606904,814.0958189,486.379719,188.0046707,104.5046272,0,0,0,0
  57  scen23,0,0,0,0,0,0,0.573170482,26.08950947,60.2485362,834.7474509,918.3847114,786.2933019,1150.302666,1159.013296,1058.480942,1052.027322,792.1529674,493.2140887,196.9065092,107.996676,0,0,0,0
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


  58  scen24,0,0,0,0,0,0,0.457649687,20.6521063,108.3789114,842.5793399,771.3765981,957.5101218,1151.987187,1010.885206,997.4106635,951.1202452,796.7613352,454.8284588,179.6190643,135.9607026,0,0,0,0
  59  scen25,0,0,0,0,0,0,0.084696945,8.124053381,121.0664514,640.2761528,662.7116255,1271.033844,1268.739501,1354.142946,1094.84003,933.1638548,785.4545936,421.5486636,207.1178554,130.3715963,0,0,0,0
  60  scen26,0,0,0,0,0,0,0,5.8929336,125.4762554,607.4180992,936.2794244,1145.610668,1245.3815,1270.526594,1072.80746,815.6613966,693.3181166,458.5963184,167.4365151,129.4722089,0,0,0,0
  61  scen27,0,0,0,0,0,0,0,30.8870574,149.0090343,623.4191135,677.6197959,1067.742871,1154.081305,1243.51283,1154.453971,1150.611615,685.7542915,462.6577583,219.1231589,106.7246503,0,0,0,0
  62  scen28,0,0,0,0,0,0,0,28.80993903,143.7069038,579.0467265,630.6323955,1240.945585,1098.480878,1121.260953,1077.766151,1049.626944,695.4027025,450.3855823,218.4940141,103.3775075,0,0,0,0
  63  scen29,0,0,0,0,0,0,0,7.385621315,42.44200636,691.3365196,782.1534775,894.4529982,1135.807557,986.7703103,1127.544487,817.8511215,838.4984641,474.0400195,183.3927756,104.8104225,0,0,0,0
  64  scen30,0,0,0,0,0,0,0,12.49238462,48.03309578,712.4424796,861.4136637,1113.900986,1087.150994,1331.67123,1095.133682,1096.131939,928.9882682,512.9006993,174.2165085,131.003804,0,0,0,0
  65  scen31,0,0,0,0,0,0,0,20.01981004,198.6826797,701.4378727,1088.372782,921.8677207,1072.813192,1337.758706,954.4801166,1104.824167,709.7741009,449.7072795,167.7613379,135.8117897,0,0,0,0
  66  scen32,0,0,0,0,0,0,0.04924796,17.1234732,151.4788116,815.7275402,1036.116619,1048.779893,1096.044296,1142.775406,1138.574775,976.942301,769.2072845,490.4814927,165.3823694,140.186182,0,0,0,0
  67  scen33,0,0,0,0,0,0,0.158424525,21.22865157,139.8028449,752.3533999,1121.983304,1062.86994,1220.625925,1128.259348,1147.658498,981.1946869,682.0778367,474.7318192,179.7862924,135.1911827,0,0,0,0
  68  scen34,0,0,0,0,0,0,0.740622271,22.86621398,151.2552639,607.7403358,779.5245458,1014.707925,992.2225572,1223.826673,1051.965099,1036.862035,796.8466888,427.5835498,191.1649106,111.2238918,0,0,0,0
  69  scen35,0,0,0,0,0,0,0.416869063,26.13828768,143.2617065,704.9593365,621.2615037,1107.633801,1033.576708,1411.778283,1132.121333,1087.529332,730.2804166,411.6761964,202.5059463,113.9924446,0,0,0,0
  70  scen36,0,0,0,0,0,0,0,10.86397828,131.1180916,673.9141074,971.361219,1157.797945,1345.518806,1146.690494,1175.744142,910.4792137,743.818497,456.1719483,196.0538469,120.2933865,0,0,0,0
  71  scen37,0,0,0,0,0,0,0.341791627,21.1472334,75.65145979,642.2761981,919.7938074,1019.490016,1074.267142,984.0286725,1069.467827,942.3656818,778.2243392,465.1664521,181.7445249,126.2594592,0,0,0,0
  72  scen38,0,0,0,0,0,0,0.165501067,27.55313049,142.1202118,693.1956552,1067.90622,1170.138696,949.0210636,819.6219685,986.4731341,955.3356941,753.3543475,471.4048791,190.1925434,126.0718152,0,0,0,0
  73  scen39,0,0,0,0,0,0,0,22.20052412,106.4209316,641.9038351,763.1573425,1145.761664,1091.957632,964.123429,877.7181307,1032.515157,722.7202247,466.2982769,191.1256235,115.3332609,0,0,0,0
  74  scen40,0,0,0,0,0,0,0,17.97392186,74.7466535,768.2819507,569.3086213,975.2401586,1074.92614,1350.30768,1147.910234,974.4898982,680.4625221,427.5707965,181.3977041,122.5755067,0,0,0,0
  75  scen41,0,0,0,0,0,0,0.450299222,24.9595995,122.8846764,536.6065185,1155.304,1220.531936,1150.537073,1492.313861,857.3970967,1005.265728,753.900541,495.9683194,180.7618838,120.3595176,0,0,0,0
  76  scen42,0,0,0,0,0,0,0,22.11277316,63.10749725,564.2649947,573.9135642,1136.588944,1005.511284,1200.286416,1376.222987,1111.066203,737.8876329,429.4359531,209.951428,110.3785063,0,0,0,0
  77  scen43,0,0,0,0,0,0,0,10.60689917,114.1576128,837.5722392,720.2778591,923.1268149,1140.191186,1314.981532,1131.910111,874.9511406,802.0070916,392.3484224,165.337674,128.6174876,0,0,0,0
  78  scen44,0,0,0,0,0,0,0.338190147,28.12950843,73.37608841,963.880993,787.7759048,776.8782978,991.4907062,924.5250812,1212.412423,1025.710784,707.0666706,516.6142959,196.2542702,118.4868155,0,0,0,0
  79  scen45,0,0,0,0,0,0,0,2.670958007,158.8399099,580.4000012,856.9213356,1125.769535,1039.249791,1357.075345,1193.348574,944.3189839,685.0983401,411.1593715,213.0455574,128.7541949,0,0,0,0
  80  scen46,0,0,0,0,0,0,0,5.120540753,76.04202687,947.9671626,764.0715704,1356.74394,965.9701249,1339.794895,1170.7668,902.8303624,773.2625365,490.7921047,183.8720992,125.5890617,0,0,0,0
  81  scen47,0,0,0,0,0,0,0,0.778827763,65.41548102,898.1403607,858.2769598,1043.571797,936.5698001,1179.981847,1075.330614,1020.689381,746.5612431,490.2883027,160.3576877,123.4694453,0,0,0,0
  82  scen48,0,0,0,0,0,0,0.746117298,22.80358919,85.63829705,699.9905616,770.7706723,994.5288211,1006.92826,1104.027894,887.2130811,1050.125117,866.0610499,465.8051871,175.2377635,122.1848096,0,0,0,0
  83  scen49,0,0,0,0,0,0,0.709846216,30.15229053,128.6459637,545.2067685,898.6129277,973.19928,939.8213577,1285.333073,950.8107135,970.9741811,824.1301516,432.6703742,179.5361988,118.6104127,0,0,0,0
  84  scen50,0,0,0,0,0,0,0.069684446,0,123.9259689,856.4264194,1085.396123,918.8206523,938.8800775,1250.596166,1152.744211,972.3449022,666.2754885,446.180956,231.5868634,114.5431592,0,0,0,0
  85  scen51,0,0,0,0,0,0,0.12555235,3.068253486,86.38963701,853.7212337,1218.24879,883.6570113,972.8369222,1141.570008,1112.741235,1028.369394,724.2035428,459.1251443,209.2686496,105.4025469,0,0,0,0
  86  scen52,0,0,0,0,0,0,0,18.43950406,171.0970958,751.0018355,1109.026382,741.1886259,1388.305889,1136.324286,1142.24807,996.1783078,793.8925441,497.0317553,162.4317696,126.8415377,0,0,0,0
  87  scen53,0,0,0,0,0,0,0,25.77248465,66.43201969,922.5400227,944.5247112,969.3363171,1224.387489,1131.203238,1182.678797,1136.120742,755.0908677,433.9925993,189.3526644,118.0454109,0,0,0,0
  88  scen54,0,0,0,0,0,0,0,21.29180858,100.8977291,730.2001894,1043.947516,1157.130884,1256.166702,1143.728694,1267.161725,1178.46837,768.8498223,453.2054604,178.321666,111.8703856,0,0,0,0
  89  scen55,0,0,0,0,0,0,0,27.57290384,125.1869541,604.9292423,683.4120815,1033.509264,1125.312396,1231.85347,1150.646229,838.0527052,768.3750265,458.7621114,191.2159129,111.4025445,0,0,0,0
  90  scen56,0,0,0,0,0,0,0.007831495,5.427497267,114.1955404,754.7658363,970.5935941,1165.678646,1172.699043,1233.999608,1340.129127,835.4227102,678.7411512,417.3626494,228.9607421,122.3949146,0,0,0,0
  91  scen57,0,0,0,0,0,0,0,22.44801313,75.48195169,742.9503066,1015.265385,802.0509365,1054.529317,1152.629022,1359.663119,1008.846221,680.1354861,496.3412814,175.3028776,124.3928543,0,0,0,0
  92  scen58,0,0,0,0,0,0,0.295198985,34.3106622,189.0173423,862.9020625,621.9615909,1130.900446,1168.182817,979.629983,1083.474799,1040.086341,840.1951101,449.184399,161.2513135,123.5709233,0,0,0,0
  93  scen59,0,0,0,0,0,0,0,20.84629902,130.2669232,591.778964,693.3804809,1235.392854,950.2477425,1337.568263,1162.18526,1127.812376,685.3830698,475.1244912,158.8966491,117.913399,0,0,0,0
  94  scen60,0,0,0,0,0,0,0,19.75584208,232.2778256,698.9469317,864.461548,1146.102951,1233.364151,1316.235698,938.1731912,842.7620685,642.5869069,453.9316761,195.9696348,121.3192296,0,0,0,0
  95  scen61,0,0,0,0,0,0,0.440094421,30.7650547,116.225945,570.5479654,1108.70756,1006.300768,1124.89603,1291.034475,1273.319659,950.2875423,784.774636,441.7516159,211.0127015,121.6111052,0,0,0,0
  96  scen62,0,0,0,0,0,0,0.476247208,31.57189515,57.24761877,751.5464239,1113.18665,1149.48512,1021.557003,1219.409498,986.4951475,903.4799089,814.6207961,464.1255921,169.8673442,126.9596766,0,0,0,0
  97  scen63,0,0,0,0,0,0,0.38881817,22.46959477,97.94493343,827.727033,1162.117103,895.3064304,945.6108192,1177.707356,1191.961851,784.1704882,797.9120077,439.529021,166.8364259,121.5098618,0,0,0,0
  98  scen64,0,0,0,0,0,0,0.124861806,26.13712908,121.9172354,760.7880058,1018.465435,952.6083697,1235.779053,1236.083807,1074.08594,946.1397643,790.934897,439.7975359,178.5699046,134.8909806,0,0,0,0
  99  scen65,0,0,0,0,0,0,0.030500041,12.06451125,222.1491506,840.9609974,1011.421942,1069.096583,1317.135225,914.9052807,925.4346,883.3901389,779.8049278,406.6904265,212.4812163,130.5347538,0,0,0,0
 100  scen66,0,0,0,0,0,0,0.295466192,28.96920832,173.3415512,471.4875737,1062.826123,1141.127162,1111.955858,1358.033907,933.2050182,1022.798661,604.1487505,409.1872924,206.984124,125.1021797,0,0,0,0
 101  scen67,0,0,0,0,0,0,0.227512771,26.92317968,171.2784126,695.9963837,931.4249651,1246.122966,1279.620097,1427.98169,975.2841361,1035.975345,644.3689769,398.1328509,190.9985983,127.5463719,0,0,0,0
 102  scen68,0,0,0,0,0,0,0.084593215,32.02312497,177.4022768,770.8077653,644.9375435,1022.048061,1039.223412,1134.607109,1145.089809,935.3600654,726.6008596,468.1217174,174.9951985,126.7062541,0,0,0,0
 103  scen69,0,0,0,0,0,0,0.235512912,36.36797659,211.5811128,704.5316055,695.0688145,940.79959,1055.508359,1048.349913,1163.590007,906.4956523,715.97651,474.2830991,181.2420269,123.4512064,0,0,0,0
 104  scen70,0,0,0,0,0,0,0,23.863587,160.0963233,709.1828995,960.8738059,795.902539,1004.764051,1235.540191,1156.277335,1137.443846,763.8829501,480.4924155,199.868811,127.5823602,0,0,0,0
 105  scen71,0,0,0,0,0,0,0,29.25195884,137.53202,718.2993703,781.1241831,774.1255432,983.3890538,964.1466424,1283.544987,888.8915986,752.0552005,445.3693354,192.2176666,113.4353745,0,0,0,0
 106  scen72,0,0,0,0,0,0,0,16.76409796,132.5172719,724.7034272,844.7503411,930.8077685,1236.63909,1144.328046,1349.931657,965.6972161,719.0108831,415.980283,187.524472,119.4811075,0,0,0,0
 107  scen73,0,0,0,0,0,0,0.226140112,17.20196723,66.40757469,724.681989,860.4742725,1268.228842,1006.447788,1295.557125,1180.592318,859.773891,841.1182275,415.6897139,171.5568618,118.4073385,0,0,0,0
 108  scen74,0,0,0,0,0,0,0,31.41462439,128.2415207,520.4655607,977.8349901,1031.000239,1088.818821,1041.795427,1245.081564,1001.060907,824.2863094,502.5774248,186.9431209,115.3400702,0,0,0,0
 109  scen75,0,0,0,0,0,0,0.251013628,9.294474455,162.0031186,641.3553268,936.3077861,1014.345235,1258.053492,1126.265935,1161.496316,1022.599589,732.2000586,462.9227365,162.9311521,115.681007,0,0,0,0
 110  scen76,0,0,0,0,0,0,0,25.33593142,160.6760223,757.9456158,646.1190691,852.0156065,1052.919619,1278.771146,1153.245664,856.0508728,834.5229991,502.2645484,190.3035234,123.3828332,0,0,0,0
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 111  scen77,0,0,0,0,0,0,0,21.39944255,133.9339379,688.0492749,680.1426957,826.8878206,1074.142837,1302.840463,1212.483812,912.5355231,820.9379772,500.9516112,173.7176081,118.533747,0,0,0,0
 112  scen78,0,0,0,0,0,0,0.156626167,31.94862704,166.9829178,654.3518385,958.1723353,876.668922,919.7176592,1099.138456,1107.918126,823.6081372,740.4527623,453.3098778,171.6339528,133.4679748,0,0,0,0
 113  scen79,0,0,0,0,0,0,0,17.43657085,108.1503729,607.9380023,1064.254532,851.3769381,588.0009705,1236.983247,1051.877416,1070.507009,761.6039603,470.1028601,172.6916096,121.9892245,0,0,0,0
 114  scen80,0,0,0,0,0,0,0.468250033,25.163603,12.98448961,762.7113756,877.9627089,1039.490161,1358.62322,905.7751175,1042.865025,1000.623337,795.7749478,432.8045239,209.7551081,129.4928785,0,0,0,0
 115  scen81,0,0,0,0,0,0,0.005145213,26.81975903,42.30377008,729.259068,930.7865404,979.8868163,855.439744,1080.950043,1073.956244,840.7590535,785.0463779,455.4955231,191.5475753,118.1771142,0,0,0,0
 116  scen82,0,0,0,0,0,0,0.038662719,25.72587603,82.4088451,717.267053,744.4486942,1111.020146,1056.700092,1151.457924,1333.297371,946.8877044,816.242215,438.610091,208.5089866,125.1447886,0,0,0,0
 117  scen83,0,0,0,0,0,0,0.317118576,36.03087624,81.21174062,763.5764245,440.4142232,1037.832185,896.3804681,1279.658487,965.9798374,876.8611489,747.7016121,457.7960259,196.9558898,123.8209368,0,0,0,0
 118  scen84,0,0,0,0,0,0,0.015931659,21.48918675,118.4438559,622.1150974,984.4500548,1242.44324,1206.668651,956.5862827,1020.473653,1102.754395,819.8530911,472.5571758,177.8783687,127.8484964,0,0,0,0
 119  scen85,0,0,0,0,0,0,0.696323663,8.48267034,117.275093,699.2806626,732.543475,892.4282015,1195.27932,980.5247856,915.8657775,1021.327563,666.8485268,437.8161385,170.5377538,115.5349059,0,0,0,0
 120  scen86,0,0,0,0,0,0,0.361936375,16.04989163,75.59213727,703.7299952,1043.827137,1197.924389,1157.177661,1711.681993,1134.704588,1070.516554,675.4867185,450.541406,171.4942292,131.7541125,0,0,0,0
 121  scen87,0,0,0,0,0,0,0.682464316,28.15604255,140.329479,794.043962,1001.76356,941.4394378,870.7559109,1280.074898,918.0801415,943.3785813,734.5112437,412.8693763,182.3197092,129.6115361,0,0,0,0
 122  scen88,0,0,0,0,0,0,0.196691485,28.99049719,126.9842058,805.6368091,891.5785077,1116.020736,1034.145652,1258.078189,1226.76155,809.003534,916.2080092,417.5189606,175.613686,136.7696867,0,0,0,0
 123  scen89,0,0,0,0,0,0,0.39388575,14.69304911,131.1650742,654.5660237,861.0440829,1112.587972,1164.52646,1264.057952,1055.417141,1013.300346,758.9731842,452.4852525,196.7319029,140.0306708,0,0,0,0
 124  scen90,0,0,0,0,0,0,0,20.23926688,134.9341575,661.921329,668.9939324,1020.988675,1231.533436,1466.625307,1234.103992,948.1005489,824.1624607,503.9260571,210.4335507,123.9182996,0,0,0,0
 125  scen91,0,0,0,0,0,0,0,29.85031612,178.2744724,693.6238292,747.7049058,1028.43389,1012.587126,1082.883571,1186.779455,1071.390292,768.9397086,427.3047633,184.3819928,122.5990871,0,0,0,0
 126  scen92,0,0,0,0,0,0,0.395967875,20.924404,105.6893433,681.2698666,778.4064701,1111.306546,1050.537556,1243.016992,1329.467574,1069.068513,785.2330594,419.5465153,196.7269967,123.3123395,0,0,0,0
 127  scen93,0,0,0,0,0,0,0.730603126,17.11778418,85.60715781,706.6283933,828.9545494,911.2111917,1230.343461,1196.855433,1428.581515,1040.591096,783.7627441,439.439909,196.0431849,127.218762,0,0,0,0
 128  scen94,0,0,0,0,0,0,0.595982307,20.28942198,68.16613601,780.1447177,844.4449852,909.0450451,1126.966531,1249.881031,1421.22101,1136.415227,830.3017971,427.8984328,190.3772719,125.5588425,0,0,0,0
 129  scen95,0,0,0,0,0,0,0.198242163,12.07381847,112.6858577,606.0534297,1296.86792,906.2419569,1295.811839,1340.764188,1226.903642,1005.477133,731.9352941,389.8958535,175.1182785,118.5320777,0,0,0,0
 130  scen96,0,0,0,0,0,0,0.428861472,18.10059305,46.16669749,751.4727682,1173.5854,942.4602118,1037.394192,1435.923697,1099.029259,998.7587366,812.3078519,426.3119807,177.8759063,138.0385816,0,0,0,0
 131  scen97,0,0,0,0,0,0,0,22.19138198,89.64494197,851.0680072,917.8360834,1013.822755,1002.792821,1508.276212,1122.913889,1042.973343,743.8424069,490.2424724,176.8926545,131.8348692,0,0,0,0
 132  scen98,0,0,0,0,0,0,0.253022886,20.48390256,63.23590042,938.4370324,669.0113991,905.6083355,1113.64747,1471.365674,988.2106056,919.2972606,818.226138,506.6854719,179.7936348,118.3859953,0,0,0,0
 133  scen99,0,0,0,0,0,0,0,14.74723757,51.92303026,1010.850976,477.4576633,1075.361106,1138.062124,1347.533745,886.6046083,898.9317019,844.2776367,499.8745454,173.7518766,129.3833777,0,0,0,0
 134  scen100,0,0,0,0,0,0,0.030437608,30.86419863,84.03687146,702.4455806,810.9999612,1237.570497,1133.981163,1161.474273,1090.771763,977.611607,721.6562692,468.7916586,161.3143066,118.2402225,0,0,0,0
 136  ;
 137   
 138  *Tolerance
 139  scalar tol;
 140  *tol=%TOL%;
 141  tol=0.03;
 142   
 143  * maximum number of iterations in LR
 144  set iter number of subgradient iterations /iter1*iter10/;
 145   
 146  * time limit for each problem
 147  scalar time_limit;
 148  *time_limit=%TIMELIM%;
 149  time_limit=2250;
 150   
 151   
 152  * Import the SORTED file
 153  table scenario_sorted(scen,*)
 155  *$INCLUDE %SORTEDFILE%.csv
 156  *$INCLUDE scenario_sorted_100_1_01.csv
 157  *$INCLUDE scenario_sorted_100_2_01.csv
 158  *$INCLUDE scenario_sorted_100_3_01.csv
 159  *$INCLUDE scenario_sorted_100_4_01.csv
 160  *$INCLUDE scenario_sorted_100_5_01.csv
 161  *$INCLUDE scenario_sorted_100_6_01.csv
 162  *$INCLUDE scenario_sorted_100_7_01.csv
 163  $INCLUDE scenario_sorted_100_8_03.csv
****                                      $282
**** LINE     43 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/inputME.gms
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


**** LINE     19 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 164  *$INCLUDE scenario_sorted_100_9_01.csv
 165  *$INCLUDE scenario_sorted_100_10_01.csv
 166  *$INCLUDE scenario_sorted_100_11_01.csv
 167  *$INCLUDE scenario_sorted_100_12_01.csv
 168  *$INCLUDE scenario_sorted_100_13_01.csv
 169  *$INCLUDE scenario_sorted_100_14_01.csv
 170  *$INCLUDE scenario_sorted_100_15_01.csv
 171  *$INCLUDE scenario_sorted_100_16_01.csv
 172  *$INCLUDE scenario_sorted_100_17_01.csv
 173  *$INCLUDE scenario_sorted_100_18_01.csv
 174  *$INCLUDE scenario_sorted_100_19_01.csv
 175  *$INCLUDE scenario_sorted_100_20_01.csv
 176  *$INCLUDE scenario_sorted_100_1_05.csv
 177  *$INCLUDE scenario_sorted_100_2_05.csv
 178  *$INCLUDE scenario_sorted_100_3_05.csv
 179  *$INCLUDE scenario_sorted_100_4_05.csv
 180  *$INCLUDE scenario_sorted_100_5_05.csv
 181  *$INCLUDE scenario_sorted_100_6_05.csv
 182  *$INCLUDE scenario_sorted_100_7_05.csv
 183  *$INCLUDE scenario_sorted_100_8_05.csv
 184  *$INCLUDE scenario_sorted_100_9_05.csv
 185  *$INCLUDE scenario_sorted_100_10_05.csv
 186  *$INCLUDE scenario_sorted_100_11_05.csv
 187  *$INCLUDE scenario_sorted_100_12_05.csv
 188  *$INCLUDE scenario_sorted_100_13_05.csv
 189  *$INCLUDE scenario_sorted_100_14_05.csv
 190  *$INCLUDE scenario_sorted_100_15_05.csv
 191  *$INCLUDE scenario_sorted_100_16_05.csv
 192  *$INCLUDE scenario_sorted_100_17_05.csv
 193  *$INCLUDE scenario_sorted_100_18_05.csv
 194  *$INCLUDE scenario_sorted_100_19_05.csv
 195  *$INCLUDE scenario_sorted_100_20_05.csv
 196  *$INCLUDE scenario_sorted_150_01.csv
 197  *$INCLUDE scenario_sorted_150_03.csv
 198  *$INCLUDE scenario_sorted_150_05.csv
 199  *$INCLUDE scenario_sorted_300_01.csv
 200  *$INCLUDE scenario_sorted_300_03.csv
 201  *$INCLUDE scenario_sorted_300_05.csv
 202  *$INCLUDE scenario_sorted_450_01.csv
 203  *$INCLUDE scenario_sorted_450_03.csv
 204  *$INCLUDE scenario_sorted_450_05.csv
 205  *$INCLUDE scenario_sorted_600_01.csv
 206  *$INCLUDE scenario_sorted_600_05.csv
 207  *$INCLUDE scenario_sorted_600_03.csv
 208  *$INCLUDE scenario_sorted_900_01.csv
 209  *$INCLUDE scenario_sorted_900_03.csv
 210  *$INCLUDE scenario_sorted_900_05.csv
 211  *$INCLUDE scenario_sorted_1200_01.csv
 212  *$INCLUDE scenario_sorted_1200_03.csv
 213  *$INCLUDE scenario_sorted_1200_05.csv
 214  *$INCLUDE scenario_sorted_2400_01.csv
 215  *$INCLUDE scenario_sorted_2400_05.csv
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 217  ;
****  $463
**** LINE     97 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/inputME.gms
**** LINE     19 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 218   
 219   
 220   
 221   
 222   
 223  ALIAS (T,TT);
 224  alias(scen,i);
 225   
 226  scalar n;
 227  n=card(scen);
 228   
 229  *Scalar which tells if LR converges
 230  scalar convergence;
 231   
 232  ** define battery  operation costs costs and solar selling prices
 233   
 234  TABLE PRICES(t,*)
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/battery_revenue.csv
 237  ,REW,CHAR,DISCH
 238  t1,0.018872128,0.025641026,0.025641026
 239  t2,0.017165378,0.025641026,0.025641026
 240  t3,0.015479861,0.025641026,0.025641026
 241  t4,0.014815148,0.025641026,0.025641026
 242  t5,0.014640477,0.025641026,0.025641026
 243  t6,0.015101974,0.025641026,0.025641026
 244  t7,0.017323907,0.025641026,0.025641026
 245  t8,0.021866318,0.025641026,0.025641026
 246  t9,0.022687626,0.025641026,0.025641026
 247  t10,0.022632312,0.025641026,0.025641026
 248  t11,0.023539775,0.025641026,0.025641026
 249  t12,0.024153055,0.025641026,0.025641026
 250  t13,0.025002242,0.025641026,0.025641026
 251  t14,0.026148843,0.025641026,0.025641026
 252  t15,0.028482657,0.025641026,0.025641026
 253  t16,0.035324217,0.025641026,0.025641026
 254  t17,0.053079881,0.025641026,0.025641026
 255  t18,0.067077457,0.025641026,0.025641026
 256  t19,0.043782645,0.025641026,0.025641026
 257  t20,0.033252185,0.025641026,0.025641026
 258  t21,0.02868827,0.025641026,0.025641026
 259  t22,0.026761757,0.025641026,0.025641026
 260  t23,0.023974723,0.025641026,0.025641026
 261  t24,0.021050776,0.025641026,0.025641026
 263  ;
 264   
 265  Prices(t,'rew')     =  - Prices(t,'rew');
 266  Prices(t,'char')    =  - Prices(t,'char');
 267  Prices(t,'dischar') =  - Prices(t,'dischar');
 268  ** define solar scenarios at all time periods
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 269   
 270   
 271  * Scaling of Solar power scenarios ;
 272  scalar scale ;
 273  scale = 1;
 274  Solar(scen,t) = scale* Solar(scen,t) ;
 275  * Remove too many decimals in Solar
 276  Solar(scen,t) = round(Solar(scen,t),2) ;
 277   
 278   
 279  scalar PROBABILITY;
 280  PROBABILITY = 1/CARD(scen);
 281   
 282  scalar eta ;
 283  *from Ben paper
 284  eta = 0.9
 285  ;
 286   
 287  parameters max_store(t), min_store(t), max_charge, max_discharge;
 288   
 289   
 290  ** define tolerance threshold
 291  SCALAR threshold;
 292  threshold = floor(card(scen)*TOL)  ;
 293   
 294  parameter BigX, LowX, X_0 maximum minimum initial energy stored ;
 295  parameter BigM(scen,t) find a good BigM ;
 296   
 297  BigX = 960 ;
 298  LowX = 0.2* BigX ;
 299  X_0  = 0.5* BigX ;
 300  max_charge =  0.5* BigX ;
 301  max_discharge =  0.5* BigX ;
 302   
 303  ************** Find a Big M
 304  * find Ntol + 1st value
 305  parameter maxsolar(t), minsolar(t), dummysolar(scen,t) ;
 306  maxsolar(t) =smax(scen,solar(scen,t)) ;
 307  dummysolar(scen,t) = solar(scen,t) ;
 308   
 309  scalar it ;
 310  it = floor(card(scen)*tol) + 1;
 311   
 312  * index of it
 313  set dummy(scen);
 314  * make the dum_iter go till at least the size of it
 315  set dum_iter /dum_iter1*dum_iter100/;
 316  loop(t,
 317  loop(dum_iter$(ord(dum_iter)le it),
 318  * find the smallest solar value for this t
 319           minsolar(t) = smin(scen,dummysolar(scen,t)) ;
 320  * index of smallest solar value
 321           dummy(scen) = yes$(dummysolar(scen,t) eq minsolar(t)) ;
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 322  * make the smallest solar value large
 323           dummysolar(scen,t)$dummy(scen) =maxsolar(t) ;
 324  ); );
 325  scalar G upper bound on q - p ;
 326  G = min(eta*(BigX - LowX), max_discharge) ;
 327   
 328  BigM(scen,t)= G - solar(scen,t) + minsolar(t);
 329   
 330  scalar run_time_total, start_time, end_time, LP_time, bound_time, lr_time ;
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/subgradient_parameters.gms
 332  parameter lambda;
 333  parameter ldual value of Lagrangian dual ;
 334  parameter bound total value of Lagrangian dual ;
 335  scalar init_lambda, init_bound initial value of lambda dual LP objective from LP ;
 336  *Hier werden die maximalen Iterationen, also big M festgelegt
 337  *set iter                 number of subgradient iterations /iter1*iter3/;
 338  scalar num_iter          how many iterations we did ;
 339  scalar contin            stopping             /1/;
 340  parameter stepsize;
 341  scalar theta /2/;
 342  scalar originalTheta;
 343  originalTheta=theta;
 344  scalar noimprovement /0/;
 345  scalar upperbound ;
 346  parameter gamma           subgradient          ;
 347  parameter b;
 348  parameter norm;
 349  parameter norm2;
 350  scalar lowerbound;
 351  parameter lambdaprevious, deltalambda, results(iter,*), prev_w(scen,t), prev_y(t)  ;
 352   
 353   
 354  scalar m ;
 355  parameter   y_previous(scen,t), y_average_previous(t), weight_previous(scen,t);
 356  scalar profit_orig, t1, t2, exit_tol;
 357   
 358  scalar final_gap ;
 359   
 360  parameter lb(scen) ;
 361  parameter rho(t) ;
 362   
 363  scalar exit_tol ;
 364  exit_tol = 0.00001 ;
 365   
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/equations_all.gms
 367  POSITIVE VARIABLES P(scen,t), Q(scen,t), Y(T), X(scen,t) ;
 368  VARIABLES OBJ, BOUND_LR ;
 369  BINARY VARIABLE Z(scen) ;
 370   
 371  scalar counter ;
 372   
 373  EQUATIONS
 374          Objective
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 375          Const1(scen,t)    balance constraint
 376          Const2(scen,t)    max charge
 377          Const3(scen,t)    max discharge
 378          Const_chance_1(scen,t)    chance constraint big M
 379          Const_chance_PH(scen,t)
 380          Const_chance_2            chance constraint sum probabilities
 381          LR                lagrangian relaxation objective
 382          Objective_scenario(scen)
 383          Const1_scenario(scen,t)    balance constraint single scenario
 384          Const2_scenario(scen,t)    max charge    single scenario
 385          Const3_scenario(scen,t)    max discharge single scenario
 386          Const_chance_1_scenario(scen,t)    chance constraint big M  single scenario
 387           Const_chance_2_scenario(scen,t)
 388          LR_scenario(scen)
 389          LR_scenario_2(scen)
 390          LR_lb(scen)
 391          ;
 392   
 393  Objective.. OBJ=E= SUM(T,Prices(T, 'REW')*Y(T) - probability*Sum(scen, Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t)  ) )    ;
 394   
 395  Const1(scen,t)$(ord(t) lt card(t))..
 396           X(scen,t+1) =E= X(scen,t) + eta* P(scen,t) - (1/eta)* Q(scen,t) ;
 397  Const1_scenario(scen,t)$(ord(t) lt card(t) and (ord(scen) eq counter))..
 398           X(scen,t+1) =E= X(scen,t) + eta* P(scen,t) - (1/eta)* Q(scen,t) ;
 399   
 400   
 401  Const_chance_1(scen,t).. Y(T) + P(scen,t) -  Q(scen,t) -SOLAR(scen,t) =L= Z(scen)*BigM(scen,t) ;
 402  Const_chance_1_scenario(scen,t)$(ord(scen) eq counter)..
 403           Y(T) + P(scen,t) -  Q(scen,t) -SOLAR(scen,t) =L=0 ;
 404  Const_chance_2_scenario(scen,t)$(ord(scen) eq counter)..
 405           Y(T) + P(scen,t) -  Q(scen,t) -SOLAR(scen,t) =L= Z(scen)*BigM(scen,t) ;
 406   
 407   
 408  Const_chance_2..      - sum(scen, z(scen)) =G= -threshold;
 409   
 410  LR.. bound_lr =e=   SUM(T,Prices(T, 'REW')*Y(T) - probability*Sum(scen, Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t)  ) )
 411                           - lambda* (threshold - sum(scen, z(scen)))  ;
 412   
 413  Objective_scenario(scen)$(ord(scen) eq counter)..
 414           OBJ =E= SUM(T,Prices(T, 'REW')*Y(T) - Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t)  )     ;
 415   
 416   
 417  LR_scenario(scen)$(ord(scen) eq counter)..
 418           bound_lr =e=   SUM(T,Prices(T, 'REW')*Y(T) - (Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t))  )  + lambda* z(scen)/probability ;
 419  LR_scenario_2(scen)$(ord(scen) eq counter)..
 420           bound_lr =e=   SUM(T,Prices(T, 'REW')*Y(T) - (Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t))  )  + lambda* z(scen)/probability +
 421                                    sum(t,weight_previous(scen,t)*Y(t)) + 0.5*sum(t, rho(t)*power(y_average_previous(t) - Y(t),2)) ;
 422   
 423  LR_lb(scen)$(ord(scen) eq counter)..
 424           bound_lr =e=   SUM(T,Prices(T, 'REW')*Y(T) - (Prices(T, 'CHAR')* P(scen,t) + Prices(t, 'DISCHAR') * Q(scen,t))  )  + lambda* z(scen)/probability +
 425                                   sum(t,weight_previous(scen,t)*Y(t)) ;
 426   
 427  *** bounds on any variables
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                      05/11/21 10:27:02 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 428  x.up(scen,t) = BigX ;
 429  x.lo(scen,t) = LowX ;
 430  q.up(scen,t) = max_discharge ;
 431  p.up(scen,t) =  max_charge ;
 432  x.fx(scen,'t1') = X_0 ;
 433  z.prior(scen)   = 1;
 434   
 435   
 436  parameter last_x(scen,t), last_p(scen,t), last_q(scen,t), last_z(scen), last_ph(scen) ;
 437  ******* ALL MODELS
 438   
 439  model schedule     / Objective,  Const1, Const_chance_1, Const_chance_2/ ;
 440  model schedule_scenario     / Objective_scenario,  Const1_scenario,  Const_chance_1_scenario/ ;
 441  model INITIAL               / LR_scenario,         Const1_scenario,  Const_chance_2_scenario/ ;
 442  model Lagrangian      / LR,    Const1, Const_chance_1/ ;
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/lp_lowerbound.gms
 444  start_time = jnow ;
 445  options optca=0 ;
 446  options optcr=0 ;
 447  solve schedule using RMIP minimizing OBJ ;
****                                           $257
**** LINE      4 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/lp_lowerbound.gms
**** LINE     23 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 448  end_time =jnow ;
 449  LP_time = ghour(end_time - start_time)*3600 + gminute(end_time - start_time)*60 + gsecond(end_time - start_time);
 450  init_lambda  = Const_chance_2.m ;
****                                $141
**** LINE      7 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/lp_lowerbound.gms
**** LINE     23 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 451  lowerbound   = Obj.l ;
****                     $141
**** LINE      8 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/lp_lowerbound.gms
**** LINE     23 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 452  scalar LP_bound ;
 453  lambda       = init_lambda ;
 454  display init_lambda, LP_time, lowerbound    ;
 455  LP_bound   = Obj.l ;
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
 457  ********************************************************************************
 458  * Find a upperbound on the problem : a feasible solution
 459  ********************************************************************************
 460   
 461  *upperbound =  0;
 462  * Find a upper bound using a fixed value and solving MIP (a feasible solution)
 463  * solve single scenario problem and choose the worst #threshold problems
 464  start_time = jnow ;
 465  schedule_scenario.solvelink = 5 ;
 466  alias(rs,scen)
 467  parameter res_scenarios(rs,*) ;
 468   
 469  loop(rs,
 470  counter = ord(rs)  ;
 471  *Solving (2) for each scenario w with corresponding z(w) = 0
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 472  solve schedule_scenario using MIP minimizing Obj ;
****                                                   $257
**** LINE     16 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
**** LINE     24 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 473  res_scenarios(rs,'obj') =obj.l ;
 474   
 475   
 476  res_scenarios(rs,'scenario') = counter ;
 477  *=counter
 478   
 479   
 480  );
 481  end_time =jnow ;
 482  run_time_total = ghour(end_time - start_time)*3600 + gminute(end_time - start_time)*60 + gsecond(end_time - start_time);
 483   
 484   
 485  ** Write to a file to sort
 486  FILE scen_sorted /scen_sorted.csv/;
 487  *.PC specifies the format of the put file: 5 -> Formatted output; non-numeric output is quoted and each item is delimited with commas.
 488  scen_sorted.PC = 5;
 489  *.ND sets the number of decimals that are displayed in the put file
 490  scen_sorted.ND = 3;
 491  PUT scen_sorted;
 492  loop(rs, put res_scenarios(rs,'scenario') put res_scenarios(rs,'obj') put /; ) ;
 493  PUTCLOSE scen_sorted;
 494   
 495   
 496  z.lo(scen) = scenario_sorted(scen,'value') ;
****                                          $116
**** LINE     40 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
**** LINE     24 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 497  *** Ensure file was generated correctly
 498  if ( sum(scen,z.lo(scen)) ne threshold, abort "sorted file not generated correctly check manually") ;
 499  start_time = jnow ;
 500  schedule.solprint = 0;
 501  *schedule.optfile  = 1;
 502  schedule.solvelink = 5 ;
 503  solve schedule using MIP minimizing Obj ;
****                                          $257
**** LINE     47 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
**** LINE     24 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 504  end_time = jnow ;
 505  bound_time =  run_time_total + ghour(end_time - start_time)*3600 + gminute(end_time - start_time)*60 + gsecond(end_time - start_time);
 506  upperbound = Obj.l ;
 507  prev_y(t) = y.l(t) ;
****                $141
**** LINE     51 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
**** LINE     24 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 508  *prev_w(scen,t) = w.l(scen,t) ;
 509   
 510  * Clear bound on z now
 511  z.up(scen) = 1 ;
 512  z.lo(scen) = 0 ;
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 513   
 514  display lowerbound,upperbound,prev_y, LP_time, bound_time  ;
 515   
 516   
 517  scalar r;
 518  set indices /1*6/;
 519   
 520  File TestingFile / TestingFile.csv /;
 521  TestingFile.pc=5;
 522  TestingFile.nd=5;
 523  put TestingFile;
 524  put 'Omega', put 'Tolerance', put 'Step Size Rule', put 'Iterations', put 'Converged?', put 'Gap LR', put 'Gap Naive', put 'Obj. Naive', put 'Obj. LR', put 'Gap' put 'Time Naive', put 'Time LR' put 'Final Lambda' put/;
 525   
 526  ********************************************************************************
 527  * Solve main Problem
 528  ********************************************************************************
 529   
 530  start_time = jnow;
 531  solve schedule using MIP minimizing Obj ;
****                                          $257
**** LINE     40 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 532  end_time = jnow ;
 533   
 534   
 535   
 536  run_time_total = ghour(end_time - start_time)*3600 + gminute(end_time - start_time)*60 + gsecond(end_time - start_time);
 537   
 538  scalar ObjNaive;
 539  ObjNaive=Obj.l;
 540   
 541   
 542  scalar GapNaive;
 543  GapNaive = abs((schedule.objEst-schedule.objVal)/schedule.objEst);
 544   
 545  scalar TimeNaive;
 546  TimeNaive=run_time_total;
 547   
 548  display Obj.l, run_time_total ;
 549   
 550  ********************************************************************************
 551  * Solve the Lagrangian Dual problem now
 552  ********************************************************************************
 553   
 554  parameter ldual_iter(iter) obj function at each iteration ;
 555  lr_time = 0 ;
 556   
 557  option limrow = 0, limcol = 0, optca=0.0001, optcr=0.0001 ;
 558   
 559  prev_y(t) = y.l(t) ;
 560   
 561  parameter check(scen,t);
 562  scalar steprule;
 563  scalar FinalIter;
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 564   
 565  loop(indices,
 566      lambda=init_lambda;
 567      lowerbound=LP_bound;
 568      theta=originalTheta;
 569      lr_time=0;
 570      run_time_total=0;
 571      contin=1;
 572      steprule=ord(indices);
 573   
 574      loop(iter$contin,
 575      num_iter = ord(iter) ;
 576  *         pass a warm start
 577               y.l(t) = prev_y(t) ;
 578               z.l(scen) = scenario_sorted(scen,'value') ;
 579               start_time = jnow;
 580   
 581  *********************************************************************
 582  ***Solve a Lagrangian iteration
 583  *********************************************************************
 584   
 585  *Test
 586   
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/plain_lr.gms
 588  * Plain LR solve
 589  Lagrangian.solvelink = 5;
 590  Lagrangian.optfile   = 1;
 591  solve Lagrangian using mip minimizing bound_lr  ;
****                                                  $257
**** LINE      4 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/plain_lr.gms
**** LINE     96 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 592   
 593  bound             = bound_lr.l ;
****                               $141
**** LINE      6 INCLUDE     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/plain_lr.gms
**** LINE     96 INPUT       /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
 594  prev_y(t)         = y.l(t) ;
 595  last_z(scen)      = z.l(scen) ;
 596   
 597  * if model is unbounded
 598  if (Lagrangian.modelstat =18,  bound = -100000000;  );
 599  results(iter,'status') = Lagrangian.modelstat;
 600   
 601      end_time = jnow ;
 602      results(iter,'time') = ghour(end_time - start_time)*3600 + gminute(end_time - start_time)*60 + gsecond(end_time - start_time);
 603      results(iter,'objective') = bound ;
 604   
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/LR_updatesMe.gms
 606  *** UPDATES FOR LAMBDA, GAMMA, THETA
 607   
 608  * Gamma update
 609  gamma =  threshold - sum(scen, last_z(scen));
 610   
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 13
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 611  * Bound and theta Update -> in stepsize 6
 612  if (bound > lowerbound,
 613           lowerbound = bound;
 614           noimprovement = 0;
 615  else
 616           noimprovement = noimprovement + 1;
 617           if (noimprovement > 1,  theta = theta/2; noimprovement = 0; );
 618  );
 619   
 620  * Fix the Stepsize
 621   
INCLUDE    /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/stepsize.gms
 623  *** Different step-size updates
 624   
 625  *** Guarantees that never zero in the denominator
 626  *norm = max(abs(gamma), 1e-6);
 627  norm2 = max(gamma*gamma, 1e-6);
 628   
 629  *** constant step-size rule
 630  if(steprule=1,stepsize = 0.5;);
 631   
 632  *** constant step length
 633  if(steprule=2,stepsize = 0.5/norm2;);
 634   
 635  *** square summable but not summable
 636  if(steprule=3,stepsize = 0.5/(1+num_iter););
 637   
 638  *** nonsummable diminishing
 639  if(steprule=4,stepsize= 0.5/sqrt(num_iter););
 640   
 641  *** nonsummable diminishing step length
 642  if(steprule=5,stepsize= (1/num_iter)/norm2;);
 643   
 644  *** original
 645  if(steprule=6,stepsize=theta*(upperbound - bound)/norm2;);
 646   
 647   
 648  * Lambda Update
 649   
 650  lambdaprevious = lambda ;
 651   
 652           if (gamma ge 0 and lambdaprevious eq 0,
 653                   lambda = lambdaprevious ; );
 654           if (gamma gt 0 and lambdaprevious gt 0,
 655                   lambda = lambdaprevious - min(stepsize, lambdaprevious/gamma)*gamma ; );
 656           if (gamma le 0,
 657                   lambda = lambdaprevious - stepsize*gamma; );
 658   
 659  * Check convergence
 660  convergence=0;
 661  deltalambda = abs(lambdaprevious-lambda) ;
 662  if( deltalambda < 0.0001, contin = 0; display 'lambdas same'; convergence = 1 );
 663   
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 14
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 664  * Results output
 665  results(iter,'deltalambda') = deltalambda;
 666  results(iter,'noimprov') = noimprovement;
 667  results(iter,'theta') = theta;
 668  results(iter,'step') = stepsize;
 669  results(iter,'gamma') = gamma ;
 670  results(iter,'lambda') = lambda ;
 671  results(iter,'gap') = abs((upperbound-lowerbound)/upperbound)     ; //gap is same as computed by GAMS
 672      if( ((results(iter,'gap') < exit_tol) and (num_iter > 2)),convergence=2; contin = 0;);
 673      lr_time = lr_time + results(iter,'time')   ;
 674      if (lr_time > time_limit, contin = 0 ; ) ;
 675   
 676      r=results(iter,'gap');
 677      FinalIter=num_iter;
 678  );
 679   
 680  run_time_total = LP_time + lr_time + bound_time  ;
 681   
 682  * check if any p and q active simultaneously (nothing to do with Lagrangian)
 683  *parameter check(scen,t);
 684  check(scen,t) = 0 ;
 685  check(scen,t) = 1$( p.l(scen,t) gt 0 and q.l(scen,t) gt 0) ;
 686  if ( sum((scen,t), check(scen,t)) gt 0, abort "error: p and q are one together, check. ");
 687   
 688   
 689   
 690  put TestingFile;
 691  put n, put tol, put steprule, put FinalIter, put convergence, put r, put GapNaive, put ObjNaive, put lowerbound, put ((lowerbound-ObjNaive)/ObjNaive), put TimeNaive, put lr_time put lambda put /;
 692   
 693  display results, lowerbound, upperbound, LP_bound, run_time_total, lr_time, num_iter ;
 694  display z.l, y.l ;
 695   
 696   
 697  );
 698   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME init_bound OF TYPE PARAM
**** STRAY NAME t1 OF TYPE PARAM
**** STRAY NAME t2 OF TYPE PARAM
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 15
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Error Messages


116  Label is unknown
141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.
257  Solve statement not checked because of previous errors
282  Unable to open include file
463  The column section in the previous table is missing

**** 12 ERROR(S)   0 WARNING(S)
GAMS 24.8.5  r61358 Released May 10, 2017 LEX-LEG x86 64bit/Linux                                                                                                                                                                     05/11/21 10:27:02 Page 16
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
     2       19 INCLUDE        1      19  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/inputME.gms
     3       33 INCLUDE        2      14  ../home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/solar_scenarios_100_8.csv
     4      236 INCLUDE        2     116  ../home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/battery_revenue.csv
     5      331 INCLUDE        1      20  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/subgradient_parameters.gms
     6      366 INCLUDE        1      22  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/equations_all.gms
     7      443 INCLUDE        1      23  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/lp_lowerbound.gms
     8      456 INCLUDE        1      24  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/heuristic_upperbound.gms
     9      587 INCLUDE        1      96  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/plain_lr.gms
    10      605 INCLUDE        1     102  ./home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/LR_updatesMe.gms
    11      622 INCLUDE       10      17  ../home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/stepsize.gms


COMPILATION TIME     =        0.030 SECONDS      3 MB  24.8.5 r61358 LEX-LEG


USER: Small MUD - 5 User License                     S160825:0507AO-LNX
      Universitaet Erlangen-Nuernberg, Lehrstuhl f. WirtschaftsmaDC7699
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.gms
Output     /home/hpc/mpwm/mpwm031h/bachelor-thesis/SampleRun_Environment/tol03/Scenario_8/TestLoop.lst

**** USER ERROR(S) ENCOUNTERED
